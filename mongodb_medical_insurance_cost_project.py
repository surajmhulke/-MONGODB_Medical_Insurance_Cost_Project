# -*- coding: utf-8 -*-
"""MONGODB_Medical_Insurance_Cost_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ge6TJxehDRH5-fYXptxuOBdMhZakoYXa

# Importing Libraries:
"""

import pymongo
import pandas as pd

import pymongo
import pandas as pd

# Define the MongoDB connection details
mongo_uri = 'mongodb://localhost:27017'

# Create a MongoDB client and connect to the database
client = pymongo.MongoClient(mongo_uri)
db = client.ML  # "ML" is the database name

# Select the collection
collection = db.medical_insurance  # "medical_insurance" is the collection name

# Retrieve data from the collection
data = list(collection.find({}))

# Load the data into a Pandas DataFrame
df = pd.DataFrame(data)

# Close the MongoDB connection
client.close()

# Display the first few rows of the DataFrame
df.head()

client=pymongo.MongoClient('mongodb://localhost:27017')
client

import json

import pandas as pd
import numpy as np

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

from sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score

import matplotlib.pyplot as plt
import seaborn as sns

import pickle
import json

# Loading Train dataset:
train_data = df.drop('_id',axis=1)

# Shape of dataset:
train_data.shape

# Cheacking for NaN Values (Missing Values):
train_data.isnull().sum()

# Insights of dataset:
train_data.info()

# Description of dataset:
train_data.describe()

encoder = LabelEncoder()
labels = encoder.fit_transform(train_data.sex)

train_data['sex'] = labels

train_data.head()

labels = encoder.fit_transform(train_data.region)

train_data['region'] = labels
train_data.head()

labels = encoder.fit_transform(train_data.smoker)

train_data['smoker'] = labels
train_data.head()

train_data.info()

"""# Train Test split"""

df = train_data.select_dtypes(exclude=object)
x = train_data.drop('charges',axis = 1)
y = train_data['charges']
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=34)

x_train

x_train.columns

df

"""# Model Training"""

model = LinearRegression()
model.fit(x_train, y_train)

# Testing Data Evaluation
y_pred = model.predict(x_test)

mse = mean_squared_error(y_test, y_pred)
print("MSE :",mse)

rmse = np.sqrt(mse)
print("RMSE :",rmse)

mae = mean_absolute_error(y_test, y_pred)
print("MAE :",mae)

r2 = r2_score(y_test, y_pred)
print('R-Squared :',r2)

# Training Data Evaluation

y_pred_train = model.predict(x_train)
mse = mean_squared_error(y_train, y_pred_train)
print("MSE :",mse)

rmse = np.sqrt(mse)
print("RMSE :",rmse)

mae = mean_absolute_error(y_train, y_pred_train)
print("MAE :",mae)

r2 = r2_score(y_train, y_pred_train)
print('R-Squared :',r2)

filename = 'medical_insurance_cost_predictor.pkl'
pickle.dump(model, open(filename,'wb'))





